declare_args() {
  is_electron_build = false
}

group("targets") {
  deps = []

  # Build these targets when building libchromiumcontent's
  # "static_library" or "shared_library"
  if (is_electron_build) {
    deps += [
      "//components/prefs",
      "//components/cdm/renderer",
      "//components/cookie_config",
      "//components/devtools_discovery",
      "//components/devtools_http_handler",
      "//components/security_state",
      "//content",
      "//content:sandbox_helper_win",
      "//content/public/app:both",
      "//content/shell:pak",
      "//content/shell:copy_shell_resources",
      "//pdf",
      "//ppapi:ppapi_cpp_lib",
      "//ppapi/host",
      "//ppapi/proxy",
      "//ppapi/shared_impl",
      "//net:net_with_v8",
      "//third_party/webrtc/modules/desktop_capture",
      "//third_party/widevine/cdm:widevinecdmadapter",
      "//third_party/widevine/cdm:version_h",
      "//ui/content_accelerators",
      "//ui/display",
      "//ui/display/util",
      "//ui/views",
      "//ui/views/controls/webview",
    ]
  }

  # These produce executables we distribute as part of libchromiumcontent.
  # Statically linked versions of them are built correctly only when the build
  # configuration is not tweaked for the purposes of statically linked
  # Electron.
  if (!is_electron_build || is_component_build) {
    deps += [
      "//chrome/test/chromedriver",
      "//v8",
    ]
  }

  # We build FFMPEG separately in the default non-component configuration
  if (!is_electron_build && !is_component_build) {
    deps += [ "//third_party/ffmpeg" ]
  }
}

if (is_electron_build && !is_component_build) {

  # This is where we build statically linked libchromiumcontent.
  # After all dependent targets are built, we use a script to collect
  # all required object files into an "objects.gni" file and re-run
  # ninja. Because "objects.gni" is a GN input file, it will cause it
  # to re-generate the targets and produce the static libraries we want.

  # Make sure the .gni file exists, otherwise it cannot be imported
  if (getenv("CHROMIUMCONTENT_2ND_PASS") == "") {
    write_file("$target_out_dir/objects.gni", "")
  }

  import("$target_out_dir/objects.gni")

  action("chromiumcontent") {
    outputs = [ "$target_out_dir/build_libs.done" ]

    script = "build_libs.py"
    args = [ "-o", rebase_path("$target_out_dir/objects.gni"),
             "-s", rebase_path(outputs[0]) ]

    deps = [ ":targets" ]
  }

  # Due to various limitations of different toolchains (like maximum
  # lib file size or maximum number of obj files), we produce multiple
  # static libraries
  group("libs") {
    deps = [
      ":libchromiumcontent",
      ":base",
      ":cc",
      ":components",
      ":ppapi",
      ":media",
      ":net",
      ":skia",
      ":angle",
      ":pdfium",
      ":webkit",
      ":webrtc",
      ":v8",
    ]
  }

  static_library("libchromiumcontent") {
    complete_static_lib = true
    sources = []
    if (defined(obj_libchromiumcontent)) {
      sources += obj_libchromiumcontent
    }
  }

  static_library("base") {
    complete_static_lib = true
    sources = []
    if (defined(obj_base)) {
      sources += obj_base
    }
  }

  static_library("cc") {
    complete_static_lib = true
    sources = []
    if (defined(obj_cc)) {
      sources += obj_cc
    }
  }

  static_library("components") {
    complete_static_lib = true
    sources = []
    if (defined(obj_components)) {
      sources += obj_components
    }
  }

  static_library("ppapi") {
    complete_static_lib = true
    sources = []
    if (defined(obj_ppapi)) {
      sources += obj_ppapi
    }
  }

  static_library("media") {
    complete_static_lib = true
    sources = []
    if (defined(obj_media)) {
      sources += obj_media
    }
  }

  static_library("net") {
    complete_static_lib = true
    sources = []
    if (defined(obj_net)) {
      sources += obj_net
    }
  }

  static_library("skia") {
    complete_static_lib = true
    sources = []
    if (defined(obj_skia)) {
      sources += obj_skia
    }
  }

  static_library("angle") {
    complete_static_lib = true
    sources = []
    if (defined(obj_angle)) {
      sources += obj_angle
    }
  }

  static_library("pdfium") {
    complete_static_lib = true
    sources = []
    if (defined(obj_pdfium)) {
      sources += obj_pdfium
    }
  }

  static_library("webkit") {
    complete_static_lib = true
    sources = []
    if (defined(obj_webkit)) {
      sources += obj_webkit
    }
  }

  static_library("webrtc") {
    complete_static_lib = true
    sources = []
    if (defined(obj_webrtc)) {
      sources += obj_webrtc
    }
  }

  static_library("v8") {
    complete_static_lib = true
    sources = []
    if (defined(obj_v8)) {
      sources += obj_v8
    }
  }

} else {

  group("chromiumcontent") {
    deps = [ ":targets" ]
  }

}
